const { Telegraf, Markup } = require("telegraf");
require("dotenv").config();
const my_const = require("./const");
const bot = new Telegraf("5537312113:AAHBC0M73um0Ia9bsQYtsXOIUFVxl-4edl0");
const { Keyboard, Key } = require("telegram-keyboard");
const fb = require("firebase/database");
const db = require("./db");

// ***************? //

//! –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
  fb.set(fb.ref(db, "users/" + ctx.from.id), {
    id: ctx.from.id,
    first_name: ctx.from.first_name,
    username: ctx.from.username,
  });

  ctx.replyWithHTML(
    `Assalomu alaykum ${
      ctx.message.from.first_name
        ? "<b>" + ctx.message.from.first_name + "</b>"
        : "–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü"
    } \n 
    Siz <a href='https://ujob.ml'>Upgrade Academy</a> Dasturlash o'quv markazining rasmiy botiga tashrif buyurdingiz.
    O'quv markazimizda quyidagi dasturlash kurslariga yozilishingiz mumkin!`,
    Keyboard.make([
      [
        {
          text: "üìö Kurslar",
          callback_data: "courses",
        },
        {
          text: "Biz haqimizda",
          callback_data: "about",
        },
      ],
    ]).reply()
  );

  // ctx.reply("Simple built-in keyboard", keyboard.reply());
  // ctx.reply("Simple inline keyboard", keyboard.inline());

  // keyboar
});

bot.on("callback_query", async (ctx) => {
  const { data } = ctx.callbackQuery;
  console.log(data);
  if (data === "courses") {
    ctx.replyWithHTML(
      `<b>üìö Kurslar</b>
      <i>
      <a href='https://ujob.ml/courses/'>Kurslar</a>
      </i>`,
      Keyboard.make([
        [
          {
            text: "üìö Kurslar",
            callback_data: "courses",
          },
          {
            text: "Biz haqimizda",
            callback_data: "about",
          },
        ],
      ]).reply()
    );
  }
});

// * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã Kurslar
// // bot.hears("üìö Kurslar", (ctx) => {
//   bot.telegram.sendMessage(
//     ctx.chat.id,
//     "Kurslar",
//     Keyboard.make([
//       [
//         Key.callback("–†–µ–¥–∞–∫—Ç–æ—Ä—ã", "btn_1"),
//         Key.callback("–û–±–∑–æ—Ä—ã", "btn_2"),
//         Key.callback("JS", "btn_3"),
//       ],
//       [
//         {
//           text: "Bosh sahifa",
//           callback_data: "btn_4",
//         },
//       ],
//     ]).reply()
//   );
// // });

// * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã Bosh sahifa
bot.hears("Bosh sahifa", (ctx) => {
  bot.telegram.sendMessage(
    ctx.chat.id,
    '<a href="https://ujob.ml">Upgrade Academy</a>',
    Keyboard.make([
      [
        {
          text: "üìö Kurslar",
          callback_data: "courses",
        },
        {
          text: "Biz haqimizda",
          callback_data: "about",
        },
      ],
    ]).reply()
  );
});

//! –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.help((ctx) => ctx.reply(my_const.commands));
//! –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /course
bot.command("course", async (ctx) => {
  try {
    await ctx.replyWithHTML(
      "<b>–ö—É—Ä—Å—ã</b>",
      Markup.inlineKeyboard([
        [
          Markup.button.callback("–†–µ–¥–∞–∫—Ç–æ—Ä—ã", "btn_1"),
          Markup.button.callback("–û–±–∑–æ—Ä—ã", "btn_2"),
          Markup.button.callback("JS", "btn_3"),
        ],
      ])
    );
  } catch (e) {
    console.error(e);
  }
});
//! users
bot.command("users", async (ctx) => {
  try {
    let users = [];
    fb.onChildAdded(fb.ref(db, "users"), (snapshot) => {
      users.push(snapshot.val());
    });
    await ctx.replyWithHTML("<b>Users:</b>" + users.length);
  } catch (e) {
    console.error(e);
  }
});

//! –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
bot.hears("phone", (ctx, next) => {
  console.log(ctx.from);
  bot.telegram.sendMessage(
    ctx.chat.id,
    "Can we get access to your phone number?",
    requestPhoneKeyboard
  );
});

//method for requesting user's location

bot.hears("location", (ctx) => {
  console.log(ctx.from);
  bot.telegram.sendMessage(
    ctx.chat.id,
    "Can we access your location?",
    requestLocationKeyboard
  );
});

//constructor for providing phone number to the bot

const requestPhoneKeyboard = {
  reply_markup: {
    one_time_keyboard: true,
    keyboard: [
      [
        {
          text: "My phone number",
          request_contact: true,
          one_time_keyboard: true,
        },
      ],
      ["Cancel"],
    ],
  },
};
//constructor for proving location to the bot

const requestLocationKeyboard = {
  reply_markup: {
    one_time_keyboard: true,
    keyboard: [
      [
        {
          text: "My location",
          request_location: true,
          one_time_keyboard: true,
        },
      ],
      ["Cancel"],
    ],
  },
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–º
 * @param {String} id_btn –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param {String} src_img –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –∏–ª–∏ false —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
 * @param {String} text –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @param {Boolean} preview –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é —É —Å—Å—ã–ª–æ–∫ –∏–ª–∏ –Ω–µ—Ç, true - –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, false - –Ω–µ—Ç
 */
function addActionBot(id_btn, src_img, text, preview) {
  bot.action(id_btn, async (ctx) => {
    try {
      await ctx.answerCbQuery();
      if (src_img !== false) {
        await ctx.replyWithPhoto({
          source: src_img,
        });
      }
      await ctx.replyWithHTML(text, {
        disable_web_page_preview: preview,
      });
    } catch (e) {
      console.error(e);
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏
addActionBot("btn_1", "./img/1.jpg", my_const.text1, true);
addActionBot("btn_2", "./img/2.jpg", my_const.text2, true);
addActionBot("btn_3", false, my_const.text3, false);

// –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
bot.launch();

// –í–∫–ª—é—á–∏—Ç—å –ø–ª–∞–≤–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
